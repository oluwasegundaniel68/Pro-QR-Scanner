plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.example.qr_pro_scan"
    compileSdkVersion 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.example.qr_pro_scan"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk false  // If true, also generate a universal APK
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFileName = output.outputFileName
            def outputAbi = outputFileName.contains('armeabi-v7a') ? 'armeabi-v7a' :
                    outputFileName.contains('arm64-v8a') ? 'arm64-v8a' :
                            outputFileName.contains('x86') ? 'x86' :
                                    outputFileName.contains('x86_64') ? 'x86_64' : 'universal'
            if (outputAbi != 'universal') {
                def abiCode = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]
                output.versionCodeOverride = abiCode.get(outputAbi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {}
